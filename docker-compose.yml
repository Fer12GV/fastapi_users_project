version: '3.8'

services:
  web:
    build: .
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - APP_NAME=${APP_NAME:-FastAPI Users API}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=${HOST:-0.0.0.0}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-*}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_HEALTH_CHECKS=${ENABLE_HEALTH_CHECKS:-true}
      - ENABLE_SECURITY_HEADERS=${ENABLE_SECURITY_HEADERS:-true}
    command: >
      sh -c "
        if [ \"$$ENVIRONMENT\" = \"development\" ]; then
          echo 'Starting in DEVELOPMENT mode with Uvicorn (hot reload)';
          uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
        else
          echo 'Starting in PRODUCTION mode with Gunicorn + Uvicorn workers';
          gunicorn app.main:app -c gunicorn_conf.py
        fi
      "
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-fastapi_users_db}
      - POSTGRES_USER=${DB_USER:-fastapi_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-fastapi_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${DB_PORT:-5431}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fastapi_user} -d ${DB_NAME:-fastapi_users_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - fastapi-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    profiles:
      - production
      - redis

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - fastapi-network
    profiles:
      - production
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fastapi-network:
    driver: bridge
